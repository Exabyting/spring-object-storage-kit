plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0' apply false
    id 'io.spring.dependency-management' version '1.1.+'
    id 'jacoco'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser' version '1.18.0'
}

group = 'com.exabyting.springosk'
version = '0.1.0'

repositories {
    mavenCentral()
}

ext {
    set("awsSdkVersion", "2.31.54")  // Fixed to specific version
    set("lombokVersion", "1.18.38")
    set("springBootVersion", "3.3.0")
    set("testcontainersVersion", "1.21.1") // Updated version
    set("junitPlatformVersion", "1.13.0")
    set("minioVersion", "8.5.17")
    set("lang3Version", "3.17.0")
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    // Spring Boot autoconfiguration support
    implementation("org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}")
    implementation("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
    implementation platform("software.amazon.awssdk:bom:${awsSdkVersion}")
    implementation('software.amazon.awssdk:s3')
    implementation('software.amazon.awssdk:apache-client')
    // https://mvnrepository.com/artifact/io.minio/minio
    implementation("io.minio:minio:${minioVersion}")
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation("org.apache.commons:commons-lang3:${lang3Version}")

    testImplementation("org.testcontainers:junit-jupiter:${testcontainersVersion}")
    testImplementation("org.testcontainers:testcontainers:${testcontainersVersion}")
    testImplementation("org.testcontainers:localstack:${testcontainersVersion}")
    testImplementation("org.testcontainers:minio:${testcontainersVersion}")
    testImplementation("org.springframework.boot:spring-boot-testcontainers:${springBootVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    // JUnit 5 Suite dependency for @Suite, @SelectPackages, etc.
    testImplementation("org.junit.platform:junit-platform-suite:${junitPlatformVersion}")
    // Configuration processor for metadata (helps with auto-complete in application.yml/properties)
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% minimum coverage
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.exabyting.springosk'
            artifactId = 'spring-object-storage-kit'

            from components.java

            pom {
                name = 'spring-object-storage-kit'
                description = 'A comprehensive Spring Boot autoconfiguration library that provides unified object storage capabilities for AWS S3 and MinIO with extensive configuration options and seamless integration.'
                url = 'https://github.com/Exabyting/spring-object-storage-kit'
                inceptionYear = '2025'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'sadman-exabyting'
                        name = 'Sadman Sakib'
                        organization = 'Exabyting'
                        organizationUrl = 'https://exabyting.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Exabyting/spring-object-storage-kit'
                    developerConnection = 'scm:git:ssh://github.com/Exabyting/spring-object-storage-kit'
                    url = 'https://github.com/Exabyting/spring-object-storage-kit'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    gitRootSearch = true
    
    project {
        authors = ['Sadman Sakib']
        license = 'MIT'
        description = 'A comprehensive Spring Boot autoconfiguration library that provides unified object storage capabilities for AWS S3 and MinIO with extensive configuration options and seamless integration.'
        longDescription = 'Spring Object Storage Kit (SpringOSK) is a powerful Spring Boot autoconfiguration library that simplifies object storage operations for both AWS S3 and MinIO. It provides unified APIs, extensive configuration options, and seamless integration with Spring Boot applications.'
        website = 'https://github.com/Exabyting/spring-object-storage-kit'
        docsUrl = 'https://github.com/Exabyting/spring-object-storage-kit/blob/main/README.md'
    }
    
    release {
        github {
            commitAuthor {
                name = 'Sadman Sakib'
                email = 'sadman@exabyting.com'
            }
        }
    }
    
    signing {
        active = 'ALWAYS'
        armored = true
    }
    
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}

signing {
   useInMemoryPgpKeys(
           findProperty("signing.key"),
           findProperty("signing.passphrase")
   )
   sign publishing.publications.maven
}